//{ Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}

class GfG {
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        //testcases
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
            String inputLine[] = br.readLine().trim().split(" ");
            
            //size of array
            int n = Integer.parseInt(inputLine[0]);
            Job[] arr = new Job[n];
            inputLine = br.readLine().trim().split(" ");
            
            //adding id, deadline, profit
            for(int i=0, k=0; i<n; i++){
                arr[i] = new Job(Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]));
            }
            
            Solution ob = new Solution();
            
            //function call
            int[] res = ob.JobScheduling(arr, n);
            System.out.println (res[0] + " " + res[1]);
        }
    }
}
// } Driver Code Ends


class Solution
{
    //Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n)
    {
        // Sorting job class-array using comparator 
        Arrays.sort(arr,(a,b)->(b.profit-a.profit)); // sort in decending order
        // if we write (a.profit-b.profit) the accending order sort
        
        // finding the maximum deadline in an array
        int maxi=0;
        for(int i=0;i<n;i++){
            if(arr[i].deadline>maxi){
                maxi=arr[i].deadline;
            }
        }
        
        //putting -1 in all indices except 0
        int result[] = new int[maxi+1];
        for(int i=1; i<result.length; i++){
            result[i]=-1;
        }
        
        
        int countjobs=0, jobprofit=0;
        
        //running an array for all jobs N
        for(int i=0; i<n; i++){
            //accessing the job deadline running till 1.
            for(int j=arr[i].deadline; j>0; j--){
                //free slot found- if deadline is 4 and the result[4]!=-1 
                //then deadiline-- to 3 then again check the condition
                if(result[j]==-1){
                    result[j]=arr[i].id;
                    countjobs++;   //increment++
                    jobprofit+=arr[i].profit;  // adding the profits
                    break; //out of the j for loop
                }
            }
        }
        
        //creating an array and puting the count and profits
        int ans[]=new int[2];
        ans[0]=countjobs;
        ans[1]=jobprofit;
        return ans;
    }
}

/*
class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}
*/
